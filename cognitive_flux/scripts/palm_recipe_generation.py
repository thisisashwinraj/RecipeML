# Author: Ashwin Raj <thisisashwinraj@gmail.com>
# License: GNU Affero General Public License v3.0
# Discussions-to: github.com/thisisashwinraj/RecipeML-Recipe-Recommendation

# Copyright (C) 2023 Ashwin Raj

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.

# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.

"""
This module provides a Python interface for utilizing the PaLM Language Model for 
text generation. The module include the class, that allows users to interact with 
PaLM API for generating textual content & another for paraphrasing generated text.

Depending on individual cases, the program may be modified to use multiprocessing 
capailities to increase the speed of data processing, on eligible local computers.
The usage of each class & their methods are described in corresponding docstrings.

Classes and Functions:
    [1] PaLMLanguageModel (class)
        [a] generate_text
    
    [2] PaLMStyleTransfer (class)
        [a] paraphrase_generated_recipe
        [b] paraphrase_for_description
        [c] paraphrase_preperation_time_and_serving_size
        [d] process_recipe_instructions

    [3] PaLMPromptModule (class)
        [a] generate_recipe_by_name_prompt
        [b] generate_recipe_description_prompt
        [c] generate_recipe_preperation_time_and_serving_size_prompt

.. versionadded:: 1.3.0
.. versionupdated:: 1.3.0

Learn about RecipeML :ref:`RecipeML: RecipeGeneration - Generating recipe by Name`
"""
import re
import ast
import pprint
import google.generativeai as palm
import random

class PaLMLanguageModel:
    """
    Wrapper class for interacting with Google PaLM API for recipe text generation

    This class encapsulates the functionality to generate text using the PaLM API.
    It provides a convenient interface for initializing the API key, & generating
    text based on a given prompt. The API key is maintained as a streamlit secret.

    Class Methods:
        [1] generate_text

    .. versionadded:: 1.3.0
    .. versionupdated:: 1.3.0

    The performance of the methods present in the class can be optimized by using
    the CPUPool via the multithreading capailities on eligible local/cloud system.
    """

    def __init__(self, api_key):
        """
        Initialize PaLMLanguageModel with the PaLM API key, and configure the API

        Parameters:
            [str] api_key: API key required to authenticate & access the PaLM API
        """
        self.api_key = api_key
        palm.configure(api_key=self.api_key)  # Configure the PaLM language model

    def generate_text(self, prompt, randomness=0.7, max_response_length=1000):
        """
        Method to generate unique recipe text using Google Pathway Language model

        This method utilizes PaLM's text generation capabilities to generate text
        output, based on given prompt. Generated text output is influenced by the
        specified randomnes level & is constrained by the maximum response length.

        Read more in the :ref:`RecipeML:DataWrangling & Fundamental PreProcessing`

        .. versionadded:: 1.3.0

        Parameters:
            [str] prompt: The input prompt to guide the recipe generation process
            [float] randomness: The level of randomness in recipe text generation
            [int] max_response_length: Maximum output token of the generated text

        Returns:
            [str] padded_start_string: Generated recipe based on the given prompt
        """
        completion = palm.generate_text(
            model="models/text-bison-001",
            prompt=prompt,
            temperature=randomness,
            max_output_tokens=max_response_length,
        )

        return completion.result  # Returns recipe text generated by the PaLM API


class PaLMStyleTransfer:
    """
    Class for PaLM Style Transfer in Recipe Titles, ingredients, and Instructions

    This class provides methods for validating PaLM result, processing the recipe
    titles, ingredients & instructions using PaLM-based style transfer techniques.

    Class Methods:
        [1] paraphrase_generated_recipe
        [2] paraphrase_for_description
        [3] paraphrase_preperation_time_and_serving_size
        [4] process_recipe_instructions

    .. versionadded:: 1.3.0
    .. versionupdated:: 1.3.0

    The performance of the methods present in the class can be optimized by using
    the CPUPool via the multithreading capailities on eligible local/cloud system.
    """

    def __init__(self): pass

    def paraphrase_generated_recipe(self, recipe):
        """
        Method to enhance & process the consistency, and of the generated recipes

        This method takes the generated recipe string as input, attempts to clean
        and evaluate it using ast.literal_eval() and returns the tuple indicating
        the success of text paraphrasing & the processed recipe generated by PaLM.

        Read more in the :ref:`RecipeML:DataWrangling & Fundamental PreProcessing`

        .. versionadded:: 1.3.0

        Parameters:
            [str] recipe: Recipe string generated by PaLM model to be paraphrased

        Returns:
            [tuple] flag, recipe: Tuple containing a boolean flag, and recipe str
        """
        try:
            # Clean the recipe string by removing specific character & substrings
            recipe = (
                recipe.replace("python", "")
                .replace("\n", "")
                .replace("```", "")
                .replace("\\", "")
            )

            recipe = ast.literal_eval(recipe) # Attempt to evaluate recipe string
            flag_paraphrase_success = True

        except:
            flag_paraphrase_success = False  # If exception set the flag to False

        return flag_paraphrase_success, recipe  # Return the flag, and the recipe

    def paraphrase_for_description(self, payload):
        """
        Method to enhance/process consistency, of the generate recipe description

        This method takes a payload as input, containing a textual description of
        a recipe & performs paraphrasing to create a description. It specifically
        focuses on removing content related to ingredients, identified by markers.

        Read more in the :ref:`RecipeML:DataWrangling & Fundamental PreProcessing`

        .. versionadded:: 1.3.0

        Parameters:
            [str] payload: Recipe description generated by PaLM to be paraphrased

        Returns:
            [str] payload: A paraphrased text with removed content and formatting
        """
        ingredients_index = payload.find("**Ingredients**")  # Find markers index

        if ingredients_index == -1:
            payload = payload  # Remove ingredients related text if marker found
        else:
            payload = payload[:ingredients_index]

        # Use regex to find/remove bold-formated text
        pattern = r"\*\*(.*?)\*\*"
        matches = re.findall(pattern, payload)

        for match in matches:
            payload = payload.replace("**" + match + "**", "")  # Replace symbols

        payload = payload.replace("\n", "")
        return payload  # Remove the newline characters from the paraphrased text

    def paraphrase_preperation_time_and_serving_size(self, payload):
        """
        Method to process payload to obtain paraphrased prep time, & serving size

        This method takes a payload containing preparation time, and serving size
        information, processes it, and returns a tuple containing the paraphrased
        values for preparation time and the serving size for the specified recipe.

        Read more in the :ref:`RecipeML:DataWrangling & Fundamental PreProcessing`

        .. versionadded:: 1.3.0

        Parameters:
            [str] payload: String containing prep time & serving size information

        Returns:
            [tuple] Tuple containing paraphrased preparation time, & serving size
        """
        try:
            # Attempt to evaluate the method parameter's payload as a python list
            preperation_time_and_serving_size = ast.literal_eval(payload)
        except:
            # Return random values within specified ranges if the evaluation fail
            preperation_time_and_serving_size = [
                str(random.randint(1, 6)),
                str(random.randrange(30, 141, 5)),
                str(random.randrange(100, 551, 5)),
            ]

        # Return the paraphrased preparation time and the serving size as a tuple
        return (
            preperation_time_and_serving_size[0],
            preperation_time_and_serving_size[1],
            preperation_time_and_serving_size[2],
        )

    def process_recipe_instructions(self, payload):
        """
        Method to process payload to obtain the processed raw recipe instructions.

        This method takes raw recipe instructions as input, cleans & formats them,
        & returns processed string with improved readability. Processing includes
        capitalizing steps, organizing into paras and ensuring proper punctuation.

        Read more in the :ref:`RecipeML:DataWrangling & Fundamental PreProcessing`

        .. versionadded:: 1.3.0

        Parameters:
            [str] payload: String containing the instructions of generated recipe

        Returns:
            [str] recipe_instructions: Processed and formatted recipe instruction
        """
        # Split the input instructions into a list using the period as separators
        input_instructions = payload.split(".")

        # Capitalize & strip leading/trailing spaces for each step in instruction
        recipe_instructions = [
            step.strip().capitalize() for step in input_instructions if step
        ]

        # Join the processed steps into a single string and capitalize first word
        recipe_instructions = ". ".join(recipe_instructions)
        recipe_instructions = re.sub(
            r"(?<=\.|\?|\!)\s*\w", lambda x: x.group().upper(), recipe_instructions
        )

        # Ensure there is a period at the end and replace the consecutive periods
        recipe_instructions = recipe_instructions + "."
        recipe_instructions = re.sub(r"\.\.", ".", recipe_instructions)

        # If there's at least 10 sentences, organize them into seprate paragraphs
        sentences = recipe_instructions.split(". ")
        if len(sentences) >= 10:
            num_sentences_per_paragraph = len(sentences) // 2

            # Join the first & the second half of the instruction into paragraphs
            first_paragraph = ". ".join(sentences[:num_sentences_per_paragraph]) + "."
            second_paragraph = ". ".join(sentences[num_sentences_per_paragraph:])

            recipe_instructions = f"{first_paragraph}<br><br>{second_paragraph}"
            try:
                recipe_instructions = re.sub(r"\d+\.\s", "", recipe_instructions)
            except Exception as error: pass

        return recipe_instructions  # Combine para & return processed instruction


class PaLMPromptModule:
    """
    Class for generating the prompt tailored for PaLM API-based recipe generation.

    This class provides methods to generate prompts for the PaLM API specifically
    designed for generating recipes by name, describing cuisines, and calculating
    preparation time and serving size. These are universal across the application.

    Class Methods:
        [1] generate_recipe_by_name_prompt
        [2] generate_recipe_description_prompt
        [3] generate_recipe_preperation_time_and_serving_size_prompt

    .. versionadded:: 1.3.0

    The performance of the methods present in the class can be optimized by using
    the CPUPool via the multithreading capailities on eligible local/cloud system.
    """

    def __init__(self): pass

    def generate_recipe_by_name_prompt(self, recipe_name):
        """
        Method to generate recipe prompt for generating recipe by name using PaLM

        Read more in the :ref:`RecipeML:DataWrangling & Fundamental PreProcessing`

        .. versionadded:: 1.3.0

        Parameters:
            [str] recipe_name: Name of cuisine, for which the prompt is generated

        Returns:
            [str] prompt: The PaLM API prompt for generating a recipe by its name
        """
        prompt = f"""
        You are an expert chef with extensive knowledge of preparing a wide variety of recipes.
        Generate a recipe for {recipe_name}.
        Return a python list of length 6 with the name, ingredients (with quantities), detailed instructions (as a paragraph without indexing), preperation time (in minutes, in integer format), serving size (in integer format) and calories in the recipe (in integer format).
        Do not add headings. Keep the list minimalist.
        """
        return prompt

    def generate_recipe_description_prompt(self, recipe_name):
        """
        Method to generate recipe description prompt for generation by using PaLM

        Read more in the :ref:`RecipeML:DataWrangling & Fundamental PreProcessing`

        .. versionadded:: 1.3.0

        Parameters:
            [str] recipe_name: Name of cuisine, for which the prompt is generated

        Returns:
            [str] prompt: The PaLM API prompt for generating a recipe description
        """
        prompt = f"""
        You are an expert creative writer with vast knowledge about tasty cuisines from different cultures.
        Write few lines about the cuisine named {recipe_name}. Do not include details about recipe ingredients and/or instructions.
        """
        return prompt

    def generate_recipe_preperation_time_and_serving_size_prompt(self, recipe_name):
        """
        Method to generate the recipe preperation time, & the serving size prompt

        Read more in the :ref:`RecipeML:DataWrangling & Fundamental PreProcessing`

        .. versionadded:: 1.3.0

        Parameters:
            [str] recipe_name: Name of cuisine, for which the prompt is generated

        Returns:
            [str] prompt: PaLM API prompt for generating prep time & serving size
        """
        prompt = f"""
        You are an expert chef with extensive knowledge of preparing a wide variety of recipes.
        Calculate the usual preperation time for preparing the recipe named {recipe_name} and also calculate the usual serving size and the calories in this recipe.
        Return a python list of length 3 with the preperation time (in minutes in integer format), serving size (in integer format), and calories (in integer format).
        Do not add headings. Keep the list minimalist.
        """
        return prompt
